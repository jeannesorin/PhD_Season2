tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = tokeep$pog20s[tokeep$pog1349==1]
tokeep$Y0 = mean(tokeep$pog20s[tokeep$pog1349==0])
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
## TUT
for (i in 1:nrow(subNT)){
print(i)
tokeep = rbind(subNT[i,], subT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y0 = tokeep$pog20s[tokeep$pog1349==1]
tokeep$Y1 = mean(tokeep$pog20s[tokeep$pog1349==0])
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
return(final)
}
###############################################################################
################################# Question 5 ##################################
###############################################################################
## ---------------------------
## Import data
data = read.dta13("Persecution_Perpetuated_QJE_Replicate/Dataset_QJE_Replicate_with_Cities.dta")
## Clean Data / Create relevant dummies & variables
data <- data %>%
mutate(exist1349 = ifelse(judaica==1 | comm1349 ==1, 1, 0),
logpop25c = log(c25pop),
percentjews = c25juden/c25pop,
percentprot = c25prot/c25pop)
data = data %>%
filter(exist1349 == 1, !is.na(pog1349)) %>%
mutate(constant = 1)
# Want to code the k-Nearest neighbor estimators: average Y for the k obs with X closest to x
# Mahalanobis metric: inverse-variance weighted Euclidian norm
# Matching on covariates
matched_data2 <- matching_own(data,"pog20s", "pog1349", c("logpop25c", "percentjews", "percentprot"), 1)
## matching, nearest neighborhood using mahalanobis
matching_own <- function(data, dep_var, treat_var, indep_var, nb){
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(indep_var))
VCV <-  1/n * t(x_data) %*% x_data
final <- sub[1,]
final$Y1 = 0
final$Y0 = 0
final = final[-1,]
## ATT
for (i in 1:nrow(subT)){
print(i)
tokeep = rbind(subT[i,], subNT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = tokeep$pog20s[tokeep$pog1349==1]
tokeep$Y0 = mean(tokeep$pog20s[tokeep$pog1349==0])
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
## TUT
for (i in 1:nrow(subNT)){
print(i)
tokeep = rbind(subNT[i,], subT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = tokeep$pog20s[tokeep$pog1349==1]
tokeep$Y0 = mean(tokeep$pog20s[tokeep$pog1349==0])
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
return(final)
}
# Want to code the k-Nearest neighbor estimators: average Y for the k obs with X closest to x
# Mahalanobis metric: inverse-variance weighted Euclidian norm
# Matching on covariates
matched_data2 <- matching_own(data,"pog20s", "pog1349", c("logpop25c", "percentjews", "percentprot"), 1)
## matching, nearest neighborhood using mahalanobis
matching_own <- function(data, dep_var, treat_var, indep_var, nb){
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(indep_var))
VCV <-  1/n * t(x_data) %*% x_data
final <- sub[1,]
final$Y1 = 0
final$Y0 = 0
final = final[-1,]
## ATT
# for (i in 1:nrow(subT)){
#   print(i)
#   tokeep = rbind(subT[i,], subNT)
#   tokeep$D2 = NA
#   for (j in 2:nrow(tokeep)){
#     tomatch <- rbind(tokeep[1,], tokeep[j,])
#     tomatchM <- t(attrapemoi(tomatch, indep_var))
#     tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
#     D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
#     tokeep$D2[j] = D2
#   }
#   min = sort(tokeep$D2)
#   min = min[1:min(nb,length(min))]
#   tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
#   tokeep$Y1 = tokeep$pog20s[tokeep$pog1349==1]
#   tokeep$Y0 = mean(tokeep$pog20s[tokeep$pog1349==0])
#   tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
#   final <- rbind(final, tokeep[1,])
# }
#
## TUT
for (i in 1:nrow(subNT)){
print(i)
tokeep = rbind(subNT[i,], subT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = tokeep$pog20s[tokeep$pog1349==1]
tokeep$Y0 = mean(tokeep$pog20s[tokeep$pog1349==0])
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
return(final)
}
# Want to code the k-Nearest neighbor estimators: average Y for the k obs with X closest to x
# Mahalanobis metric: inverse-variance weighted Euclidian norm
# Matching on covariates
matched_data2 <- matching_own(data,"pog20s", "pog1349", c("logpop25c", "percentjews", "percentprot"), 1)
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(indep_var))
VCV <-  1/n * t(x_data) %*% x_data
final <- sub[1,]
final$Y1 = 0
final$Y0 = 0
final = final[-1,]
i=1
print(i)
tokeep = rbind(subNT[i,], subT)
tokeep$D2 = NA
j=1
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
print(i)
tokeep = rbind(subNT[i,], subT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
nb=4
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = tokeep$pog20s[tokeep$pog1349==1]
tokeep$Y1 = mean(tokeep$pog20s[tokeep$pog1349==1])
## matching, nearest neighborhood using mahalanobis
matching_own <- function(data, dep_var, treat_var, indep_var, nb){
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(indep_var))
VCV <-  1/n * t(x_data) %*% x_data
final <- sub[1,]
final$Y1 = 0
final$Y0 = 0
final = final[-1,]
# ATT
for (i in 1:nrow(subT)){
print(i)
tokeep = rbind(subT[i,], subNT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = tokeep$pog20s[tokeep$pog1349==1]
tokeep$Y0 = mean(tokeep$pog20s[tokeep$pog1349==0])
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
#
## TUT
for (i in 1:nrow(subNT)){
print(i)
tokeep = rbind(subNT[i,], subT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = mean(tokeep$pog20s[tokeep$pog1349==1])
tokeep$Y0 = tokeep$pog20s[tokeep$pog1349==0]
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
return(final)
}
# Want to code the k-Nearest neighbor estimators: average Y for the k obs with X closest to x
# Mahalanobis metric: inverse-variance weighted Euclidian norm
# Matching on covariates
matched_data2 <- matching_own(data,"pog20s", "pog1349", c("logpop25c", "percentjews", "percentprot"), 1)
mean(matched_data2$Y1[matched_data2$pog1349==1]) - mean(matched_data2$Y0[matched_data2$pog1349==1])
sub = matched_data2 %>% filter(pog1349==1)
ATT = mean(sub$Y1) - mean(sub$Y0)
ATT
ATE = mean(matched_data2$Y1) - mean(matched_data2$Y0)
ATE
# Want to code the k-Nearest neighbor estimators: average Y for the k obs with X closest to x
# Mahalanobis metric: inverse-variance weighted Euclidian norm
# Matching on covariates
matched_data2 <- matching_own(data,"pog20s", "pog1349", c("logpop25c", "percentjews", "percentprot"), 4)
subT = geo_matched_sample %>% filter(pog1349 == 1)
ATT = mean(subT$Y1) - mean(subT$Y0)
sub = matched_data2 %>% filter(pog1349==1)
ATT = mean(sub$Y1) - mean(sub$Y0)
ATT
ATE = mean(matched_data2$Y1) - mean(matched_data2$Y0)
ATE
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(indep_var))
VCV <-  1/n * t(x_data) %*% x_data
final <- sub[1,]
final$Y1 = 0
final$Y0 = 0
final = final[-1,]
all_names = c()
for (x in indep_var){
name = paste(x, "adj", sep="_")
all_names = append(all_names, name)
final[,name] = final[,x] / var(final[,x])
}
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
all_names = c()
for (x in indep_var){
name = paste(x, "adj", sep="_")
all_names = append(all_names, name)
sub[,name] = sub[,x] / var(sub[,x])
}
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
all_names = c()
for (x in indep_var){
name = paste(x, "adj", sep="_")
all_names = append(all_names, name)
sub[,name] = (sub[,x] - mean(sub[,x])) / var(sub[,x])
}
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(indep_var))
VCV <-  1/n * t(x_data) %*% x_data
final <- sub[1,]
final$Y1 = 0
final$Y0 = 0
final = final[-1,]
## matching, nearest neighborhood using mahalanobis
matching_own <- function(data, dep_var, treat_var, indep_var, nb){
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
all_names = c()
for (x in indep_var){
name = paste(x, "adj", sep="_")
all_names = append(all_names, name)
sub[,name] = (sub[,x] - mean(sub[,x])) / var(sub[,x])
}
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(indep_var))
VCV <-  1/n * t(x_data) %*% x_data
final <- sub[1,]
final$Y1 = 0
final$Y0 = 0
final = final[-1,]
# ATT
for (i in 1:nrow(subT)){
print(i)
tokeep = rbind(subT[i,], subNT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, all_names))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = tokeep$pog20s[tokeep$pog1349==1]
tokeep$Y0 = mean(tokeep$pog20s[tokeep$pog1349==0])
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
#
## TUT
for (i in 1:nrow(subNT)){
print(i)
tokeep = rbind(subNT[i,], subT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = mean(tokeep$pog20s[tokeep$pog1349==1])
tokeep$Y0 = tokeep$pog20s[tokeep$pog1349==0]
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
return(final)
}
# Want to code the k-Nearest neighbor estimators: average Y for the k obs with X closest to x
# Mahalanobis metric: inverse-variance weighted Euclidian norm
# Matching on covariates
matched_data2 <- matching_own(data,"pog20s", "pog1349", c("logpop25c", "percentjews", "percentprot"), 4)
sub = matched_data2 %>% filter(pog1349==1)
ATT = mean(sub$Y1) - mean(sub$Y0)
ATT
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
all_names = c()
for (x in indep_var){
name = paste(x, "adj", sep="_")
all_names = append(all_names, name)
sub[,name] = (sub[,x] - mean(sub[,x])) / var(sub[,x])
}
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(indep_var))
VCV <-  1/n * t(x_data) %*% x_data
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(all_names))
all_names = c()
for (x in indep_var){
name = paste(x, "adj", sep="_")
all_names = append(all_names, name)
sub[,name] = (sub[,x] - mean(sub[,x]))
}
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(all_names))
VCV <-  1/n * t(x_data) %*% x_data
VCV
## matching, nearest neighborhood using mahalanobis
matching_own <- function(data, dep_var, treat_var, indep_var, nb){
data$index <- 1:nrow(data)
sub <- data %>% select(all_of(dep_var), all_of(treat_var), all_of(indep_var), index)
sub <- sub[complete.cases(sub),]
all_names = c()
for (x in indep_var){
name = paste(x, "adj", sep="_")
all_names = append(all_names, name)
sub[,name] = (sub[,x] - mean(sub[,x]))
}
subT <- sub[sub[,treat_var]==1,]
subNT <- sub[sub[,treat_var]==0,]
n <- nrow(sub)
# var-cov matrix for all treated and untreated?
x_data <-  attrapemoi(sub, all_of(all_names))
VCV <-  1/n * t(x_data) %*% x_data
final <- sub[1,]
final$Y1 = 0
final$Y0 = 0
final = final[-1,]
# ATT
for (i in 1:nrow(subT)){
print(i)
tokeep = rbind(subT[i,], subNT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, all_names))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = tokeep$pog20s[tokeep$pog1349==1]
tokeep$Y0 = mean(tokeep$pog20s[tokeep$pog1349==0])
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
#
## TUT
for (i in 1:nrow(subNT)){
print(i)
tokeep = rbind(subNT[i,], subT)
tokeep$D2 = NA
for (j in 2:nrow(tokeep)){
tomatch <- rbind(tokeep[1,], tokeep[j,])
tomatchM <- t(attrapemoi(tomatch, indep_var))
tomatchM_sub1 <- tomatchM[,1] - tomatchM[,2]
D2 = t(tomatchM_sub1) %*% VCV %*% tomatchM_sub1
tokeep$D2[j] = D2
}
min = sort(tokeep$D2)
min = min[1:min(nb,length(min))]
tokeep <- rbind(tokeep[1,], tokeep %>% filter(D2 %in% min))
tokeep$Y1 = mean(tokeep$pog20s[tokeep$pog1349==1])
tokeep$Y0 = tokeep$pog20s[tokeep$pog1349==0]
tokeep = tokeep %>% select(pog20s, pog1349, logpop25c, percentjews, percentprot, index, Y1, Y0)
final <- rbind(final, tokeep[1,])
}
return(final)
}
# Want to code the k-Nearest neighbor estimators: average Y for the k obs with X closest to x
# Mahalanobis metric: inverse-variance weighted Euclidian norm
# Matching on covariates
matched_data2 <- matching_own(data,"pog20s", "pog1349", c("logpop25c", "percentjews", "percentprot"), 4)
sub = matched_data2 %>% filter(pog1349==1)
ATT = mean(sub$Y1) - mean(sub$Y0)
ATT
